var Promise = require('bluebird');

var AuditLog = require('./audit.log.schema');

this.listLogs = query => {
  return AuditLog.find(query).sort('-time').lean();
};

this.find = query => {
  return AuditLog.find(query);
};

// this.getCount = async(function(query) {
//   var promise = new Promise(function(resolve, reject) {
//     try {
//       var count = await(AuditLog.count(query))
//       return resolve(count);
//     } catch(err) {
//       return reject(err);
//     }
//   });
//   return promise;
// });

// this.getAllAuditLogs = async(function(userId, params) {
//   var limit, query, searchText, skip;
//   skip = params.skip;
//   limit = params.limit;
//   searchText = params.searchText;
//   query = {
//     userId: userId
//   };
//   return AuditLog.find(query).sort('-time').lean().skip(skip).limit(limit);
// });

// this.getTotalAuditLogCount = function(userId, params) {
//   return new Promise(function(resolve, reject) {
//     var query;
//     query = {
//       userId: userId
//     };
//     return AuditLog.count(query, function(err, count) {
//       if (err) {
//         return reject(err);
//       } else {
//         return resolve(count);
//       }
//     });
//   });
// };

this.createLog = (user, action, detail, type, status, reason) => {
  var auditLog
  if (user) {
    auditLog = {
      user: user,
      email: user.email,
      logType: type,
      action: action,
      time: new Date(),
      detail: detail,
      status: status,
      reason: reason
    };
    auditLog = new AuditLog(auditLog);
    return auditLog.save();
  }
};

this.updateLog = (id, logs) => {
  var promise = new Promise(async (resolve, reject) => {
    try {
      var log = await (AuditLog.findOneAndUpdate({ _id: id }, { '$set': logs }, { new: true }))
      return resolve(log)
    } catch (err) {
      return reject(err)
    }
  });
  return promise
}

module.exports = this;

// ---
// generated by coffee-script 1.9.2